Compose is a native UI toolkit , it is not part of the framework it is a library .
It is declarative unlike the views which is imperative . Declarative means the programmers does not step by step
define how the UI should work , it is declared once in the function @Composable functiom how the UI should
react on getting some data.

Composable layouts - Box,Row,Column,LazyGrid

Modifiers - it modifies the size , background , scroll  ,  how it is viewed

 Column (
        modifier = Modifier
            .verticalScroll(rememberScrollState())
    ){  -- This act as ListView and not RecyclerView , it will render all the list items on the screen , even if not visible


When a composable is hit for the 1st time it undergoes "Initial composition" , when it is hit 2nd time it undergoes
recomposition basically ,when the state  changes , UI recreates
**** VERY IMPORTANT***
The UI creation  inside a composable function  may or may not be sequentially  even though they might be written
sequentially , it depends on the system completely e.g.-

@Composable
fun PreviewFunction(){
    StartScreen()
    MiddleScreen()
    BottomScreen()
}
The above functions may or may not run sequentially

--- If the state of a compose changes while being generated , it cancels its current state and goes for the updated state

--- remember - saves the state of the data during recomposition but when the activity is again created it goes away
    rememberSaveable - saves the data in the activity bundle and can retain even on screen rotation

Side effects - if there is a variable which is changed outside the scope of a jetpack compose
then it can cause side effects to another part of the compose

LauchedEffect gets executed only once irrespective of the number of times the compose is being called
 - it also launches a coroutine scope and becomes thread safe
 - if the orientation changes and the  coroutine inside the
 lauchedeffect is doing some job , it will throw , standaloneCoroutine exception
 this is because when orientation changes the existing coroutine gets cancelled
 and a new one is launcehd

 coroutinescope , in case we want to use a coroutine inside a UI component like a button
 most propbably inside the onClick

 rememberUpdatedState is used when we want to run a  long running task and then use the updated
 states value . THis is useful if we want to use an updated value post recomposition

 Navigation :
 NavHost - the starting point of the navigation
 NavGraph - The path desginer represented as graph , which contains the allowed paths
 of navigation. It is a collection of nodes
 NavController - Handles the interaction between a navhost and navgraph

 We always define a navcontroller first because it manages the navhost and navgraph interaction
 Values are passed acress screens using NavArguments

 fun App2() {
     val navController = rememberNavController()
     NavHost(navController = navController, startDestination = "registration") {
         composable(route = "Login") {
             LoginScreen()
         }
        // composable(route = "main/{email}/{}/{}", arguments = listOf(
         composable(route = "main/{email}", arguments = listOf(
             navArgument("email"){
                 type = NavType.StringType
             }
         )) {
            val email =  it.arguments?.getString("email")


             MainScreen(email!!)

         }
         composable(route = "registration") {
             RegsiterScreen{email->
                 navController.navigate("main/$email")
             }
         }

     }
 }



 @Composable
 fun RegsiterScreen(onclick:(emal:String)->Unit){
     Text(
         text = "Register",
         fontSize = 108.sp,
         fontStyle =FontStyle.Normal,
         maxLines = 1,
         modifier = Modifier
             .clickable {
                 onclick("kroy@gmail.com")
             }



     )
 }

 @Composable
 fun LoginScreen(){
     Text(
         text = "Login",
         fontSize = 108.sp,
         fontStyle =FontStyle.Normal,
         maxLines = 1



     )
 }

 @Composable
 fun MainScreen(emal: String?){
     Text(
         text = "Main - $emal",
         fontSize = 108.sp,
         fontStyle =FontStyle.Normal,
         maxLines = 10



     )
 }


